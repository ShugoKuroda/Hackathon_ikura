//----------------------------------------------
//ゲージの処理
//Author::林海斗
//--------------------------------------------
#include "main.h" 
#include "manager.h"
#include "renderer.h"
#include "gauge.h"
#include "fade.h"
#include "gaugeber.h"
#include "gaugeframe.h"
//#include "Polygon.h"
//#include "gaugeber.h"
//-----------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------

CGauge::CGauge()
{

	m_pFrame = nullptr;
}
//-----------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------

CGauge::~CGauge()
{

}
//-----------------------------------------------------------------------------
// インスタンス生成処理
//-----------------------------------------------------------------------------

CGauge *CGauge::Create(const D3DXVECTOR3& pos, const D3DXVECTOR3& scale,
	const float& fMaxValue)
{
	CGauge *pGauge = NULL;
	pGauge = new CGauge();
	//ゲージの枠の生成
	if (!pGauge->m_pFrame)
	{
		pGauge->m_pFrame = CGaugeFrame::Create({ pos.x + (scale.x / 2.0f),pos.y,0.0f }, scale);
	}
	pGauge->m_pGaugeBer = CGaugeber::Create(pos, scale, fMaxValue);

	pGauge->Init();

	return pGauge;
}
//-----------------------------------------------------------------------------
// 初期化処理
//-----------------------------------------------------------------------------

HRESULT CGauge::Init(void)
{

	return S_OK;
}
//-----------------------------------------------------------------------------
// 終了処理
//-----------------------------------------------------------------------------

void CGauge::Uninit()
{
	if (m_pFrame != nullptr)
	{
		m_pFrame->Uninit();
		m_pFrame = nullptr;
	}
}
//-----------------------------------------------------------------------------
// 更新処理
//-----------------------------------------------------------------------------

void CGauge::Update()
{


}
//-----------------------------------------------------------------------------
// 描画処理
//-----------------------------------------------------------------------------

void CGauge::Draw()
{

}


//--------------------------------------------------------------------
//ゲージの増加処理
//--------------------------------------------------------------------
void CGauge::SetAddGauge(float AddValue)
{
	if (m_pGaugeBer)
	{
		m_pGaugeBer->SetGauge(AddValue);
	}
}

float CGauge::GetGaugeValue()
{
	if (m_pGaugeBer)
	{
		return m_pGaugeBer->GetGaugeValue();
	}
	return 0.0f;
}
